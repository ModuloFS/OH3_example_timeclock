val Number OFF_SUNSET_MAX = 120 // Represents 2 am

// new due to OH3
var ZonedDateTime datetime_converter

var Number sunset_minute_of_day = 0
var Number sunrise_minute_of_day = 0
var Number now_minute_of_day = 0

var Number on_sunset = 0
var Number off_sunset = 0

var Number on_sunrise = 0
var Number off_sunrise = 0

var Number switchphase = 0


rule "Astrotimeclock_Initialization"
when 
	Item DEBUG_ResetAstroclock received command ON
then

	// Astrotimeclock 1
	postUpdate(LOCAL_TriggerdelaySunset_1, 60.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunset_1, 60.0)
	Thread::sleep(10)	
 	postUpdate(LOCAL_OntimeBeforeSunrise_1, 0.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunrise_1, 0.0) 
	Thread::sleep(10)

	// Astrotimeclock 2
	postUpdate(LOCAL_TriggerdelaySunset_2, 60.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunset_2, 60.0)
	Thread::sleep(10)	
 	postUpdate(LOCAL_OntimeBeforeSunrise_2, 0.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunrise_2, 0.0)
	Thread::sleep(10)
	
	// Astrotimelcock Rollershutter 1
 	postUpdate(LOCAL_TriggerdelaySunsetRollo_1, 60.0) 
	Thread::sleep(10)
	postUpdate(LOCAL_TriggerdelaySunriseRollo_1, 60.0) 
	Thread::sleep(10)

	// Astrotimelcock Rollershutter 2
	postUpdate(LOCAL_TriggerdelaySunsetRollo_2, 60.0) 
	Thread::sleep(10)
	postUpdate(LOCAL_TriggerdelaySunriseRollo_2, 60.0) 
	Thread::sleep(10)
	 
end


rule "Connect_Astro_Sunrise_and_Sunset_1"
when
	Item LOCAL_OntimeAfterSunset_1 received command 5000
then

	sendCommand(LOCAL_OntimeBeforeSunrise_1, 0)

end

rule "Connect_Astro_Sunrise_and_Sunset_2"
when
	Item LOCAL_OntimeAfterSunset_2 received command 5000
then

	sendCommand(LOCAL_OntimeBeforeSunrise_2, 0)

end



rule "Astrotimeclock_backend"
when
	// Run every minute with an offset of 30 seconds
	Time cron "30 */1 * * * ?"

then

	// Convert the time of Sunset to minute of day
	//datetime_converter = new DateTime(LOCAL_NauticDuskEnd.state.toString)
	//sunset_minute_of_day = datetime_converter.getMinuteOfDay

	// new due to OH3
	datetime_converter = (LOCAL_NauticDuskEnd.state as DateTimeType).zonedDateTime
	sunset_minute_of_day = datetime_converter.getHour * 60
	sunset_minute_of_day = sunset_minute_of_day + datetime_converter.getMinute

	// Convert the time of sunrise to minute of day
	//datetime_converter = new DateTimeType(LOCAL_NauticDawnStart.state.toString)
	//sunrise_minute_of_day = datetime_converter.getMinuteOfDay

	// new due to OH3
	datetime_converter = (LOCAL_NauticDawnStart.state as DateTimeType).zonedDateTime
	sunrise_minute_of_day = datetime_converter.getHour * 60
	sunrise_minute_of_day = sunrise_minute_of_day + datetime_converter.getMinute

	// Actual time in minute of day
	//now_minute_of_day = now.getMinuteOfDay

	// new due to OH3
	now_minute_of_day = now.getHour * 60
	now_minute_of_day = now_minute_of_day + now.getMinute


	// Astrotimeclock 1
	
	// Switch-on-time at sunset, you have to add an offset of -60 because a mapping in the sidemap can only be equal or bigger than 0
	on_sunset = sunset_minute_of_day - 60 + (LOCAL_TriggerdelaySunset_1.state as DecimalType)
	if(on_sunset < 0) on_sunset = on_sunset + 1440 // Catch overflow

	// Switch-off-time after sunset
	off_sunset = (LOCAL_OntimeAfterSunset_1.state as DecimalType)

	// Switch-on-time at sunrise. If the Item hast the value 0 this function is deactivated
	if((LOCAL_OntimeBeforeSunrise_1.state as DecimalType).intValue > 0) on_sunrise = sunrise_minute_of_day - (LOCAL_OntimeBeforeSunrise_1.state as DecimalType).intValue
	else on_sunrise = 0

	// Switch-off-time at/after sunrise
	off_sunrise = sunrise_minute_of_day + (LOCAL_OntimeAfterSunrise_1.state as DecimalType)

	// Check if onphase is between sunset and sunrise +- the offsets
	if(off_sunset > 1440)
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunrise))	switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}	
	// Check the sunset-switchtimes
	else if(on_sunset < off_sunset)
	{
		if((now_minute_of_day > on_sunset) && (now_minute_of_day < off_sunset))		switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}
	// Check if the off_sunset time is on the next day
	else if((on_sunset > off_sunset) && (off_sunset <= OFF_SUNSET_MAX))
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunset)) 	switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}
	else 
	{
		switchphase = 0
	}

	// Check the sunrise-switchtime
	if(on_sunrise > 0)
	{
		if((now_minute_of_day > on_sunrise) && (now_minute_of_day < off_sunrise)) 	switchphase = 1 // We are actual in the ON-Phase
		// We are actual in the OFF-Phase do not manipulate the switchphase here
	}

	// Evaluation of the switching edge, only send a switchcommand at the edge change.
	if((switchphase == 1) && (LOCAL_Astrotrigger_1.state != ON)) 		sendCommand(LOCAL_Astrotrigger_1, ON)
	else if((switchphase == 0) && (LOCAL_Astrotrigger_1.state != OFF)) 	sendCommand(LOCAL_Astrotrigger_1, OFF)


	// Astrotimeclock 2

	// Switch-on-time at sunset, you have to add an offset of -60 because a mapping in the sidemap can only be equal or bigger than 0
	on_sunset = sunset_minute_of_day - 60 + (LOCAL_TriggerdelaySunset_2.state as DecimalType)
	if(on_sunset < 0) on_sunset = on_sunset + 1440 // Ãœberlauf abfangen

	// Switch-off-time after sunset
	off_sunset = (LOCAL_OntimeAfterSunset_2.state as DecimalType)

	// Switch-on-time at sunrise. If the Item hast the value 0 this function is deactivated
	if((LOCAL_OntimeBeforeSunrise_2.state as DecimalType).intValue > 0) on_sunrise = sunrise_minute_of_day - (LOCAL_OntimeBeforeSunrise_2.state as DecimalType).intValue
	else on_sunrise = 0

	// Zeitpunkt an dem ausgeschalten werden soll bei Sonnenaufgang
	off_sunrise = sunrise_minute_of_day + (LOCAL_OntimeAfterSunrise_2.state as DecimalType)

	// Check if onphase is between sunset and sunrise +- the offsets
	if(off_sunset > 1440)
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunrise))	switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}	
	// Check the sunset-switchtimes
	else if(on_sunset < off_sunset)
	{
		if((now_minute_of_day > on_sunset) && (now_minute_of_day < off_sunset))		switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}
	// Check if the off_sunset time is on the next day
	else if((on_sunset > off_sunset) && (off_sunset <= OFF_SUNSET_MAX))
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunset)) 	switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}
	else 
	{
		switchphase = 0
	}

	// Check the sunrise-switchtime
	if(on_sunrise > 0)
	{
		if((now_minute_of_day > on_sunrise) && (now_minute_of_day < off_sunrise)) 	switchphase = 1 // We are actual in the ON-Phase
		// We are actual in the OFF-Phase do not manipulate the switchphase here
	}

	// Evaluation of the switching edge, only send a switchcommand at the edge change.
	if((switchphase == 1) && (LOCAL_Astrotrigger_2.state != ON)) 		sendCommand(LOCAL_Astrotrigger_2, ON)
	else if((switchphase == 0) && (LOCAL_Astrotrigger_2.state != OFF)) 	sendCommand(LOCAL_Astrotrigger_2, OFF)


	// Astrotimeclock Rollershutter 1

	// Switch-on-time at sunset, you have to add an offset of -60 because a mapping in the sidemap can only be equal or bigger than 0
	on_sunset = sunset_minute_of_day - 60 + (LOCAL_TriggerdelaySunsetRollo_1.state as DecimalType)
	if(on_sunset < 0) on_sunset = on_sunset + 1440 // Catch overflow

	// Switch-off-time at/after sunrise, you have to add an offset of -60 because a mapping in the sidemap can only be equal or bigger than 0
	off_sunrise = sunrise_minute_of_day - 60 + (LOCAL_TriggerdelaySunriseRollo_1.state as DecimalType)
	if(off_sunrise < 0) off_sunrise = off_sunrise + 1440 // Catch overflow

	if(off_sunrise < on_sunset)
	{
		// Normal case, if sunset is on one day and sunrise is on the next day
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunrise))	switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}
	else
	{
		// Case if sunset and sunrise is on the same day
		if((now_minute_of_day > on_sunset) && (now_minute_of_day < off_sunrise))	switchphase = 1 // We are actual in the ON-Phase
		else																		switchphase = 0 // We are actual in the OFF-Phase
	}

	// Evaluation of the switching edge, only send a switchcommand at the edge change.
	if((switchphase == 1) && (LOCAL_Rollo_Astrotrigger_1.state != ON)) 			sendCommand(LOCAL_Rollo_Astrotrigger_1, ON)
	else if((switchphase == 0) && (LOCAL_Rollo_Astrotrigger_1.state != OFF)) 	sendCommand(LOCAL_Rollo_Astrotrigger_1, OFF)


	// Astrotimeclock Rollershutter 2

	// Switch-on-time at sunset, you have to add an offset of -60 because a mapping in the sidemap can only be equal or bigger than 0
	on_sunset = sunset_minute_of_day - 60 + (LOCAL_TriggerdelaySunsetRollo_2.state as DecimalType)
	if(on_sunset < 0) on_sunset = on_sunset + 1440 // Catch overflow

	// Switch-off-time at/after sunrise, you have to add an offset of -60 because a mapping in the sidemap can only be equal or bigger than 0
	off_sunrise = sunrise_minute_of_day - 60 + (LOCAL_TriggerdelaySunriseRollo_2.state as DecimalType)
	if(off_sunrise < 0) off_sunrise = off_sunrise + 1440 // Catch overflow

	if(off_sunrise < on_sunset)
	{
		// Normal case, if sunset is on one day and sunrise is on the next day
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunrise))	switchphase = 1 // We are actual in the ON-Phase
		else 																		switchphase = 0 // We are actual in the OFF-Phase
	}
	else
	{
		// Case if sunset and sunrise is on the same day
		if((now_minute_of_day > on_sunset) && (now_minute_of_day < off_sunrise))	switchphase = 1 // We are actual in the ON-Phase
		else																		switchphase = 0 // We are actual in the OFF-Phase
	}

	// Evaluation of the switching edge, only send a switchcommand at the edge change.
	if((switchphase == 1) && (LOCAL_Rollo_Astrotrigger_2.state != ON)) 			sendCommand(LOCAL_Rollo_Astrotrigger_2, ON)
	else if((switchphase == 0) && (LOCAL_Rollo_Astrotrigger_2.state != OFF)) 	sendCommand(LOCAL_Rollo_Astrotrigger_2, OFF)

end